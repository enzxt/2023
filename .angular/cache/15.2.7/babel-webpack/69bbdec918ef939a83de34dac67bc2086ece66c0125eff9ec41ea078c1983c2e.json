{"ast":null,"code":"import exampledata from '../../data/sample-music-data.json';\nimport { Album } from '../models/Album';\nimport { Artist } from '../models/Artist';\nimport { Track } from '../models/Track';\nimport * as i0 from \"@angular/core\";\nexport class MusicServiceService {\n  constructor() {\n    this.artists = []; // Array to hold artists\n    this.albums = []; // Array to hold albums\n    // When the service is created, call these functions to initialize data\n    this.createArtists();\n    this.createAlbums();\n  }\n  createArtists() {\n    // Function to create artists\n    this.artists.push(new Artist(0, 'The Beatles')); // Pushing a new Artist object to the artists array\n  }\n\n  createAlbums() {\n    // Function to create albums\n    exampledata.forEach(data => {\n      // Looping through each item in the example data\n      if (data.artist === 'The Beatles') {\n        // Checking if the artist is The Beatles\n        const tracks = data.tracks.map(trackData => new Track(trackData.id, trackData.number, trackData.title, trackData.lyrics, trackData.video));\n        // Mapping each track in the data to a new Track object and storing in the tracks array\n        const album = new Album(data.id, data.title, data.artist, data.description, data.year, data.image, tracks);\n        // Creating a new Album object with the data and tracks, and storing in the albums array\n        this.albums.push(album);\n        // Pushing the newly created album to the albums array\n      }\n    });\n  }\n\n  getArtists() {\n    // Function to get all artists\n    return this.artists; // Returning the artists array\n  }\n\n  getAlbums(artist) {\n    // Function to get albums by artist\n    return this.albums; // Returning the albums array\n  }\n\n  getAlbum(artist, id) {\n    // Function to get a specific album by artist and ID\n    const album = this.albums.find(a => a.Artist === artist && a.Id === id);\n    // Finding the album in the albums array based on artist and ID\n    if (album) {\n      // If album is found\n      const tracks = album.Tracks.map(track => new Track(track.Id, track.Number, track.Title, track.Lyrics, track.Video));\n      // Mapping each track in the album to a new Track object\n      return new Album(album.Id, album.Title, album.Artist, album.Description, album.Year, album.Image, tracks);\n      // Returning a new Album object with the updated tracks\n    }\n\n    return undefined; // If album is not found, return undefined\n  }\n\n  createAlbum(album) {\n    // Function to create a new album\n    this.albums.push(album); // Pushing the new album to the albums array\n  }\n\n  updateAlbum(album) {\n    // Function to update an existing album\n    const index = this.albums.findIndex(a => a.Id === album.Id);\n    // Finding the index of the album to be updated\n    if (index !== -1) {\n      // If album is found\n      this.albums.splice(index, 1, album);\n      // Replacing the album at the found index with the updated album\n    }\n  }\n\n  deleteAlbum(id, artist) {\n    // Function to delete an album\n    const index = this.albums.findIndex(a => a.Id === id);\n    // Finding the index of the album to be deleted\n    if (index !== -1) {\n      // If album is found\n      this.albums.splice(index, 1);\n      // Removing the album from the albums array\n    }\n  }\n}\n\nMusicServiceService.ɵfac = function MusicServiceService_Factory(t) {\n  return new (t || MusicServiceService)();\n};\nMusicServiceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: MusicServiceService,\n  factory: MusicServiceService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["exampledata","Album","Artist","Track","MusicServiceService","constructor","createArtists","createAlbums","artists","push","forEach","data","artist","tracks","map","trackData","id","number","title","lyrics","video","album","description","year","image","albums","getArtists","getAlbums","getAlbum","find","a","Id","Tracks","track","Number","Title","Lyrics","Video","Description","Year","Image","undefined","createAlbum","updateAlbum","index","findIndex","splice","deleteAlbum","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\enzot\\Downloads\\gcuStudent-main\\gcuStudent-main\\CST391\\solutions\\activity3\\2023\\src\\app\\service\\music-service.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\nimport exampledata from '../../data/sample-music-data.json';\n\nimport { Album } from '../models/Album';\nimport { Artist } from '../models/Artist';\nimport { Track } from '../models/Track';\n\n@Injectable({ providedIn: 'root' })\nexport class MusicServiceService {\n\tprivate readonly artists: Artist[] = []; // Array to hold artists\n\tprivate readonly albums: Album[] = []; // Array to hold albums\n\n\tconstructor() {\n\t\t// When the service is created, call these functions to initialize data\n\t\tthis.createArtists();\n\t\tthis.createAlbums();\n\t}\n\n\tprivate createArtists(): void {\n\t\t// Function to create artists\n\t\tthis.artists.push(new Artist(0, 'The Beatles')); // Pushing a new Artist object to the artists array\n\t}\n\n\tprivate createAlbums(): void {\n\t\t// Function to create albums\n\t\texampledata.forEach((data: any) => {\n\t\t\t// Looping through each item in the example data\n\t\t\tif (data.artist === 'The Beatles') {\n\t\t\t\t// Checking if the artist is The Beatles\n\t\t\t\tconst tracks = data.tracks.map((trackData: any) => new Track(trackData.id, trackData.number, trackData.title, trackData.lyrics, trackData.video));\n\t\t\t\t// Mapping each track in the data to a new Track object and storing in the tracks array\n\t\t\t\tconst album = new Album(data.id, data.title, data.artist, data.description, data.year, data.image, tracks);\n\t\t\t\t// Creating a new Album object with the data and tracks, and storing in the albums array\n\t\t\t\tthis.albums.push(album);\n\t\t\t\t// Pushing the newly created album to the albums array\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic getArtists(): Artist[] {\n\t\t// Function to get all artists\n\t\treturn this.artists; // Returning the artists array\n\t}\n\n\tpublic getAlbums(artist: string): Album[] {\n\t\t// Function to get albums by artist\n\t\treturn this.albums; // Returning the albums array\n\t}\n\n\tpublic getAlbum(artist: string, id: number): Album | undefined {\n\t\t// Function to get a specific album by artist and ID\n\t\tconst album = this.albums.find((a) => a.Artist === artist && a.Id === id);\n\t\t// Finding the album in the albums array based on artist and ID\n\n\t\tif (album) {\n\t\t\t// If album is found\n\t\t\tconst tracks = album.Tracks.map((track) => new Track(track.Id, track.Number, track.Title, track.Lyrics, track.Video));\n\t\t\t// Mapping each track in the album to a new Track object\n\t\t\treturn new Album(album.Id, album.Title, album.Artist, album.Description, album.Year, album.Image, tracks);\n\t\t\t// Returning a new Album object with the updated tracks\n\t\t}\n\n\t\treturn undefined; // If album is not found, return undefined\n\t}\n\n\tpublic createAlbum(album: Album): void {\n\t\t// Function to create a new album\n\t\tthis.albums.push(album); // Pushing the new album to the albums array\n\t}\n\n\tpublic updateAlbum(album: Album): void {\n\t\t// Function to update an existing album\n\t\tconst index = this.albums.findIndex((a) => a.Id === album.Id);\n\t\t// Finding the index of the album to be updated\n\n\t\tif (index !== -1) {\n\t\t\t// If album is found\n\t\t\tthis.albums.splice(index, 1, album);\n\t\t\t// Replacing the album at the found index with the updated album\n\t\t}\n\t}\n\n\tpublic deleteAlbum(id: number, artist: string): void {\n\t\t// Function to delete an album\n\t\tconst index = this.albums.findIndex((a) => a.Id === id);\n\t\t// Finding the index of the album to be deleted\n\n\t\tif (index !== -1) {\n\t\t\t// If album is found\n\t\t\tthis.albums.splice(index, 1);\n\t\t\t// Removing the album from the albums array\n\t\t}\n\t}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}